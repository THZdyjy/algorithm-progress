class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:

        # 定义dp[i]为到达第i个台阶时所需最小花费，那么dp[n]即为到达楼顶时所需最小花费
        # 初始化，注意，可以选择下标0或者1开始，这时候是不花费的，因此-》
        dp = [0] * (len(cost) + 1)
        dp[0] = dp[1] = 0
        # 开始状态转移
        """
        对状态转移方程解释一下：首先要明白初始化为什么都是0，因为一上来就可以选择站到那，因此不需要花费
        其次，对于第n个台阶，可以从n-1个台阶过来，也可以从n-2个台阶过来，但选择哪个呢
        从第n-1个台阶过来，所需花费是，①到达n-1个台阶所需的最小花费，即dp[n-1] + ②从i-1个台阶向上爬所需花费
        同理，从n-2个台阶，也由这两部分构成
        最终，选择二者中最小的，即为到达第n个台阶所需的最小花费
        """
        for i in range(2, len(cost)+1):
            dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2])
        return dp[-1]